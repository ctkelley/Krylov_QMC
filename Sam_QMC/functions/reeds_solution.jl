
"""
Analytic solution to reeds problem. Returns array and plot.
"""
function reeds_sol(n=1000; LB=-8.0, RB=8.0)

    y1(x) =  (1 - 5.96168047527760*10^(-47)*cosh(52.06761235859028*x) -
    6.78355315350872*10^(-56)*cosh(62.76152118553390*x) -
    7.20274049646598*10^(-84)*cosh(95.14161078659372*x) -
    6.34541150517664*10^(-238)*cosh(272.5766481169758*x))

    y2(x) = (1.685808767651539*10^3*exp(-5.206761235859028*x) + 3.143867366942945*10^4*exp(-6.276152118553390*x) +
    2.879977113018352*10^7*exp(-9.514161078659372*x) + 8.594190506002560*10^22*exp(-27.25766481169758*x) +
    1.298426035202193*10^(-36)*exp(27.25766481169758*x) + 1.432344656303454*10^(-13)*exp(9.514161078659372*x) +
    1.514562265056083*10^(-9)*exp(6.276152118553390*x) + 1.594431209450755*10^(-8)*exp(5.206761235859028*x))

    y3(x) = 1.105109108062394

    y4(x) = (10 - 0.1983746883968300*exp(0.5254295183311557*x) - 7.824765332896027*10^(-5)*exp(1.108937229227813*x) -
    9.746660212187006*10^(-6)*exp(1.615640334315550*x) - 2.895098351422132*10^(-13)*exp(4.554850586269065*x) -
    75.34793864805979*exp(-0.5254295183311557*x ) - 20.42874998426011*exp(-1.108937229227813*x) -
    7.129175418204712*10^(2)*exp(-1.615640334315550*x) - 2.716409367577795*10^(9)*exp(-4.554850586269065*x))

    y5(x) = (31.53212162577067*exp(-0.5254295183311557*x) + 26.25911060454856*exp(-1.108937229227813*x) +
    1.841223066417334*10^(3)*exp(-1.615640334315550*x) + 1.555593549394869*10^(11)*exp(-4.554850586269065*x) -
    3.119310353653182*10^(-3)*exp(0.5254295183311557*x) - 6.336401143340483*10^(-7)*exp(1.108937229227813*x) -
    3.528757679361232*10^(-8)*exp(1.615640334315550*x) - 4.405514335746888*10^(-18)*exp(4.554850586269065*x))

    dx = (RB-LB)/n
    left_edges = LinRange(LB, RB-dx, n)
    right_edges = LinRange(LB+dx, RB, n)
    midpoints = LinRange(LB+dx/2, RB-dx/2, n)
    y = zeros(n)

    for count in range(1,n)
        x = midpoints[count]
        a = abs(left_edges[count])
        b = abs(right_edges[count])
        dx = b-a
        if (x < -6.0)
            y[count] = quadgk(y5, a, b)[1]/dx
        elseif (x < -5.0)
            y[count] = quadgk(y4, a, b)[1]/dx
        elseif (x < -3.0)
            y[count] = quadgk(y3, a, b)[1]/dx
        elseif (x < -2.0)
            y[count] = quadgk(y2, a, b)[1]/dx
        elseif (x < 2.0)
            y[count] = quadgk(y1, a, b)[1]/dx
        elseif (x < 3.0)
            y[count] = quadgk(y2, a, b)[1]/dx
        elseif (x < 5.0)
            y[count] = quadgk(y3, a, b)[1]/dx
        elseif (x < 6.0)
            y[count] = quadgk(y4, a, b)[1]/dx
        else
            y[count] = quadgk(y5, a, b)[1]/dx
        end
    end
    return y
end

function reeds_mcdc_sol()
    phi = [
    0.999728,
    1.00655,
    1.00167,
    0.999012,
    0.996156,
    1.00316,
    1.00329,
    1.00258,
    1.00179,
    0.978096,
    0.201235,
    0.0480392,
    0.0318872,
    0.086683,
    0.425123,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.07903,
    1.41979,
    1.76,
    1.93068,
    1.95059,
    1.79057,
    1.46905,
    1.24811,
    1.06156,
    0.926375,
    0.81588,
    0.676592,
    0.564448,
    0.470006,
    0.38719,
    0.290723
    ]

    return phi
